package buildDevelopmentSets;

import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Random;
import java.util.Scanner;
import java.util.Set;

public class RandomSubset {

/**
 * This class is meant for taking the freebase-dbpedia appends file in
 * experiments\sameAs\derived-data-files\
 * and using it to randomly generate a duplicates file and non-duplicates file
 * for development set experiments.
 */
	/*
	 * appendFile should, for ideal usage, be freebaseDbpediaSameAsAppend
	 * outputFile is where the chosen lines are printed
	 * num is number of desired lines
	 * totalLines is total number of lines in appendFile. We trust user input
	 * on this one.
	 * freebaseDbpediaSameAsAppend has 2,093,007 lines
	 */
	public static void selectDuplicates(String appendFile, 
			String outputFile, int num, int totalLines){
		Scanner in=null;
		PrintWriter out=null;
		Set<Integer> indices=new HashSet<Integer>(num);
		Random r=new Random(System.currentTimeMillis());
		int count=0;
		while(indices.size()<num){
			int k=r.nextInt(totalLines);
			indices.add(k);
		}
		System.out.println("Selection of line indices complete. Printing lines to file...");
		try{
			in=new Scanner(new FileReader(appendFile));
			out=new PrintWriter(new File(outputFile));
			while(in.hasNextLine()){
				String line=in.nextLine();
				if(indices.contains(count))
					out.println(line);
				count++;
			}
		}catch(IOException e){
			e.printStackTrace();
		}finally{
			in.close();
			out.close();
		}
	}
	
	
	/*
	 * This file was taken almost verbatim from 
	 * freebase/src/developmentSet/DevelopmentSet/printNNonDuplicates
	 * 
	 * Two changes are the try/catch blocks instead of the throws
	 * and the randomness by virtue of taking time as seed, instead
	 * of some fixed number.
	 * 
	 * duplicatesFile should have been generated by selectDuplicates, outputFile
	 * is where the nonDuplicates are printed and num is number requested.
	 * 
	 * Once the non-duplicates have been printed, we should do some
	 * testing just to make sure everything looks fine.
	 */
	public static void buildNonDuplicates(String duplicatesFile, 
			String outputFile, int num){
		ArrayList<String> dbpedia=new ArrayList<String>();
		ArrayList<String> freebase=new ArrayList<String>();
		//dbpedia entities referring to freebase entities
		HashMap<String, HashSet<String>> dbpediaIndex=new HashMap<String, HashSet<String>>();
		Scanner in=null;
		try{
			in=new Scanner(new FileReader(duplicatesFile));
			while(in.hasNextLine()){
				String line=in.nextLine();
				String[] fields=line.split("\t\\{\t|\t\\}\t");
				if(fields.length!=4){
					System.out.println(line);
					System.out.println(fields.length);
					continue;
				}
				String f=fields[1].trim();
				freebase.add(f);
				String d=fields[3].trim();
				dbpedia.add(d);
				if(!dbpediaIndex.containsKey(d))
					dbpediaIndex.put(d, new HashSet<String>());
				dbpediaIndex.get(d).add(f);
			
		}
		}catch(IOException e){
			e.printStackTrace();
		}finally{
			in.close();
		}
		
		int count=0;
		PrintWriter out=null;
		
		try{
			out=new PrintWriter(new File(outputFile));
			Random r=new Random(System.currentTimeMillis());	//don't make this non-deterministic for now.
			long i=-1;
			while(count<num){
				int k1=r.nextInt(dbpedia.size());
				int k2=r.nextInt(freebase.size());
				if(dbpediaIndex.get(dbpedia.get(k1)).contains(freebase.get(k2)))
					continue;
				out.println(Long.toString(i)+"x\tfreebase-instance\t{\t"+freebase.get(k2)+
						"\t}\tdbpedia-instance\t{\t"+dbpedia.get(k1)+"\t}");
				i--;
				count++;
			}
		}catch(IOException e){
			e.printStackTrace();
		}finally{
			out.close();
		}
		
	}
}
